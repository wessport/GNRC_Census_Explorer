saveRDS(household_type_hawaiian_dt,"./data/Household type including living alone native hawaiian and other pacific islander alone.rds")
tableID <- "B11001F"
household_type_other_dt <- request_data(tableID)
saveRDS(household_type_other_dt,"./data/Household type including living alone some other race alone.rds")
tableID <- "B11001G"
household_type_more_dt <- request_data(tableID)
saveRDS(household_type_more_dt,"Household type including living alone two or more races.rds")
tableID <- "B11001A"
household_type_white_dt <- request_data(tableID)
saveRDS(household_type_white_dt,"./data/Household type including living alone white alone.rds")
tableID <- "B25001"
housing_unit_dt <- request_data(tableID)
saveRDS(housing_unit_dt,"./data/Housing Units.rds")
View(household_income_dt)
View(household_type_alone_dt)
tableID <- "C16001"
language_spoken_dt <- request_data(tableID)
saveRDS(language_spoken_dt,"./data/Language spoken at home for the population 5 years and over.rds")
tableID <- "B09021"
living_arrangements_dt <- request_data(tableID)
saveRDS(living_arrangements_dt,"./data/Living arrangements of adults 18 years and over by age.rds")
tableID <- "B23020"
mean_usual_hours_dt <- request_data(tableID)
saveRDS(mean_usual_hours_dt,"./data/Mean usual hours worked in the past 12 months for workers 16 to 64 years.rds")
tableID <- "B08301"
means_transportation_dt <- request_data(tableID)
saveRDS(means_transportation_dt,"./data/Means of transportation to work.rds")
tableID <- "B08105C"
means_trans_native_dt <- request_data(tableID)
saveRDS(means_trans_native_dt,"./data/Means of transportation to work american indian and alaska native alone.rds")
tableID <- "B08105D"
means_trans_asian_dt <- request_data(tableID)
saveRDS(means_trans_asian_dt,"./data/Means of transportation to work asian alone.rds")
tableID <- "B08105B"
means_trans_black_dt <- request_data(tableID)
saveRDS(means_trans_black_dt,"./data/Means of transportation to work black or african american alone.rds")
tableID <- "B08101"
means_trans_by_age_dt <- request_data(tableID)
saveRDS(means_trans_by_age_dt,"./data/Means of transportation to work by age.rds")
tableID <- "B08128"
means_trans_by_class_dt <- request_data(tableID)
saveRDS(means_trans_by_class_dt,"./data/Means of transportation to work by class of worker.rds")
tableID <- "B08122"
means_trans_by_poverty_dt <- request_data(tableID)
saveRDS(means_trans_by_poverty_dt,"./data/Means of transportation to work by poverty status in the past 12 mo.rds")
tableID <- "B08105I"
means_trans_hispanic_dt <- request_data(tableID)
saveRDS(means_trans_hispanic_dt,"./data/Means of transportation to work hispanic or latino.rds")
tableID <- "B08105E"
means_trans_hawaiian_dt <- request_data(tableID)
saveRDS(means_trans_hawaiian_dt,"./data/Means of transportation to work native hawaiian and other pacific islander alone.rds")
tableID <- "B08105F"
means_trans_other_dt <- request_data(tableID)
saveRDS(means_trans_other_dt,"./data/Means of transportation to work some other race alone.rds")
tableID <- "B08105G"
means_trans_more_dt <- request_data(tableID)
saveRDS(means_trans_more_dt,"./data/Means of transportation to work two or more races.rds")
table_ID <- "B08105A"
means_trans_white_dt <- request_data(table_ID)
saveRDS(means_trans_white_dt,"./data/Means of transportation to work white alone.rds")
tableID <- "B08105H"
means_trans_white_noth <- request_data(tableID)
saveRDS(means_trans_white_noth,"./data/Means of transportation to work white alone not hispanic or latino.rds")
tableID <- "B08103"
median_age_trans_dt <- request_data(tableID)
saveRDS(median_age_trans_dt,"./data/Median age by means of transportation to work.rds")
tableID <- "B23013"
median_age_by_sex_dt <- request_data(tableID)
saveRDS(median_age_by_sex_dt,"./data/Median age by sex for workers 16 to 64 years.rds")
tableID <- "B25031"
median_gross_rent_dt <- request_data(tableID)
saveRDS(median_gross_rent_dt,"./data/Median gross rent by bedrooms.rds")
tableID <- "B25105"
median_monthly_housing_dt <- request_data(tableID)
saveRDS(median_monthly_housing_dt,"./data/Median monthly housing costs dollars.rds")
tableID <- "B25077"
median_value_dollars <- request_data(tableID)
saveRDS(median_value_dollars,"./data/Median value dollars.rds")
tableID <- "C27006"
medicare_cov_by_sex_dt <- request_data(tableID)
saveRDS(medicare_cov_by_sex_dt,"./data/Medicare coverage by sex by age.rds")
tableID <- "B25104"
monthly_housing_costs_dt <- request_data(tableID)
saveRDS(monthly_housing_costs_dt,"./data/Monthly housing costs.rds")
tableID <- "B25087"
mortage_status_dt <- request_data(tableID)
saveRDS(mortage_status_dt,"./data/Mortage status and selected monthly owner costs.rds")
tableID <- "B25002"
occupancy_status_dt <- request_data(tableID)
saveRDS(occupancy_status_dt,"./data/Occupancy status.rds")
tableID <- "B09001"
pop_under_18_dt <- request_data(tableID)
saveRDS(pop_under_18_dt,"./data/Population under 18 years by age.rds")
tableID <- "B17020"
poverty_status_dt <- request_data(tableID)
saveRDS(poverty_status_dt,"./data/Poverty status in the past 12 months by age.rds")
tableID <- "B02001"
rave_dt <- request_data(tableID)
saveRDS(rave_dt,"./data/Race.rds")
tableID <- "C17002"
ratio_income_pov_dt <- request_data(tableID)
saveRDS(ratio_income_pov_dt,"Ratio of income to poverty level in the past 12 mo.rds")
tableID <- "B17026"
ratio_income_pov_fam_dt <- request_data(tableID)
saveRDS(ratio_income_pov_fam_dt,"./data/Ratio of income to poverty level of families in the past 12 months.rds")
tableID <- "B14001"
shool_enrollment_dt <- request_data(tableID)
saveRDS(shool_enrollment_dt,"./data/School enrollment by level of school for the population 3 years and over.rds")
tableID <- "B01001"
sex_by_age_dt <- request_data(tableID)
saveRDS(sex_by_age_dt,"./data/Sex by age.rds")
sex_by_age_by_dis <- "B18101"
sex_by_age_by_dis_dt <- request_data(tableID)
saveRDS(sex_by_age_by_dis_dt,"./data/Sex by age by disability status.rds")
tableID <- "B15001"
sex_by_age_by_edu_dt <- request_data(tableID)
saveRDS(sex_by_age_by_edu_dt,"./data/Sex by age by educational attainment for the population 18 years and over.rds")
tableID <- "B23001"
sex_by_age_by_emp_dt <- request_data(tableID)
saveRDS(sex_by_age_by_emp_dt,"./data/Sex by age by employment status for the population 16 years and over.rds")
tableID <- "B21001"
sex_by_age_by_vet_dt <- request_data(tableID)
saveRDS(sex_by_age_by_vet_dt,"./data/Sex by age by veteran status for the civilian population 18 years and over.rds")
tableID <- "B24080"
sex_by_class_dt <- request_data(tableID)
saveRDS(sex_by_class_dt,"./data/Sex by class of worker for the civilian employed population 16 years and over.rds")
tableID <- "B08006"
sex_of_workers_trans_dt <- request_data(tableID)
saveRDS(sex_of_workers_trans_dt,"./data/Sex of workers by means of transportation to work.rds")
tableID <- "B08012"
sex_workers_travel_time_dt <- request_data(tableID)
saveRDS(sex_workers_travel_time_dt,"./data/Sex of workers by travel time to work.rds")
tableID <- "B08014"
sex_workers_vehicle_avail_dt <- request_data(tableID)
saveRDS(sex_workers_vehicle_avail_dt,"./data/Sex of workers by vehicles available.rds")
tableID <- "B08302"
time_leaving_home_dt <- request_data(tableID)
saveRDS(time_leaving_home_dt,"./data/Time leaving home to go to work.rds")
tableID <- "B01003"
total_pop_dt <- request_data(tableID)
saveRDS(total_pop_dt,"./data/Total Population.rds")
tableID <- "B08303"
travel_time_to_work_dt <- request_data(tableID)
saveRDS(travel_time_to_work_dt,"./data/Travel time to work.rds")
tableID <- "B25004"
vacancy_status_dt <- request_data(tableID)
saveRDS(vacancy_status_dt,"./data/Vacancy status.rds")
tableID <- "B25075"
value_dt <- request_data(tableID)
saveRDS(value_dt,"./data/Value.rds")
tableID <- "B13002"
women_birth_dt <- request_data(tableID)
saveRDS(women_birth_dt,"./data/Women 15 to 50 years who had a birth in the past 12 mo by marital status and age.rds")
tableID <- "B25034"
year_struc_built_dt <- request_data(tableID)
saveRDS(year_struc_built_dt,"./data/Year structure built.rds")
View(median_monthly_housing_dt)
geom <- readRDS("./data/geometry.rds")
test <- contract_rent_d
test <- contract_rent_dt
test %>%
left_join(geom, by = c("GEOID" = "GEOID")) -> t
t <- st_as_sf(t)
t %>%
ungroup %>%
filter(Vintage == 2016 & Level == "county") -> f_cnty_data
t %>%
ungroup %>%
filter(Vintage == 2016 & Level == "county") -> f_cnty_data
leaflet(f_cnty_data) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(noWrap = TRUE, zIndex = 1)) %>%
addPolygons(
group = "county",
# fillColor = ~ colorQuantile("YlOrRd", f_cnty_data[["Total estimate"]])(f_cnty_data[["Total estimate"]]),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
# opacity = 1,
#dashArray = "3",
highlight = highlightOptions(color = "white",weight = 3,bringToFront = TRUE),
options = list(zIndex = 2),
label = lapply(c, HTML)
) %>%
addProviderTiles(
"CartoDB.PositronOnlyLabels",
group = "labels",
options = providerTileOptions(zIndex = 3, pane = 'markerPane')
) %>%
addLayersControl(overlayGroups = c("polygons", "labels"))
leaflet(f_cnty_data) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(noWrap = TRUE, zIndex = 1)) %>%
addPolygons(
group = "county",
fillColor = ~ colorQuantile("YlOrRd", f_cnty_data[["Total estimate"]])(f_cnty_data[["Total estimate"]]),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
# opacity = 1,
#dashArray = "3",
highlight = highlightOptions(color = "white",weight = 3,bringToFront = TRUE),
options = list(zIndex = 2),
label = lapply(c, HTML)
) %>%
addProviderTiles(
"CartoDB.PositronOnlyLabels",
group = "labels",
options = providerTileOptions(zIndex = 3, pane = 'markerPane')
) %>%
addLayersControl(overlayGroups = c("polygons", "labels"))
View(f_cnty_data)
t %>%
filter(Vintage == 2016 & Level == "county") -> f_cnty_data
View(contract_rent_dt)
contract_rent %>% filter(NAME == "Cheatham County, Tennessee") -> test
View(test)
contract_rent %>% filter(GEOID == "47021") -> test
contract_rent_dt %>% filter(GEOID == "47021") -> test
test <- contract_rent_dt
test %>%
left_join(geom, by = c("GEOID" = "GEOID")) -> t
t <- st_as_sf(t)
View(t)
dplyr::distinct(geom) -> g
View(geom)
unique(geom) -> h
View(geom)
test %>%
left_join(geom) -> t
# Create geometry object for joining geometry to data
df <- readRDS("./data/default_data.rds")
View(df)
df %>%
ungroup() %>%
select(NAME) -> geom
View(geom)
df %>%
ungroup() %>%
select(NAME,Vintage) -> geom
saveRDS(geom, "./data/geometry.rds")
View(geom)
saveRDS(geom, "./data/geometry.rds")
geom <- readRDS("./data/geometry.rds")
test <- contract_rent_dt
test %>%
left_join(geom, by = c("NAME" = "NAME")) -> t
View(geom)
test %>%
left_join(geom, by = c("NAME" = "NAME","Vintage" = "Vintage")) -> t
View(t)
t <- st_as_sf(t)
t %>%
filter(Vintage == 2016 & Level == "county") -> f_cnty_data
leaflet(f_cnty_data) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(noWrap = TRUE, zIndex = 1)) %>%
addPolygons(
group = "county",
fillColor = ~ colorQuantile("YlOrRd", f_cnty_data[["Total estimate"]])(f_cnty_data[["Total estimate"]]),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
# opacity = 1,
#dashArray = "3",
highlight = highlightOptions(color = "white",weight = 3,bringToFront = TRUE),
options = list(zIndex = 2),
label = lapply(c, HTML)
) %>%
addProviderTiles(
"CartoDB.PositronOnlyLabels",
group = "labels",
options = providerTileOptions(zIndex = 3, pane = 'markerPane')
) %>%
addLayersControl(overlayGroups = c("polygons", "labels"))
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
temp <- readRDS("./data/Diversity Indices.rds")
View(temp)
temp %>%
st_set_geometry(NULL)
temp %>% st_set_geometry(NULL)-> temp
View(temp)
saveRDS(temp,"./data/Diversity Indices.rds")
st_set_geometry(NULL)
runApp('census_explorer_app.R')
View(contract_rent_dt)
runApp('census_explorer_app.R')
contract_rent_dt$`With cash rent $2,000 to $2,499 estimate`
is.NA(contract_rent_dt$`With cash rent $2,000 to $2,499 estimate`)
is.na(contract_rent_dt$`With cash rent $2,000 to $2,499 estimate`)
contract_rent_dt %>% filter(Vintage == 2016 & Level == 'county') -> temp
View(temp)
temp$`With cash rent $2,000 to $2,499 estimate`
na.omit(temp)
temp <- na.omit(temp)
contract_rent_dt %>% filter(Vintage == 2016 & Level == 'county') -> temp
temp <- na.omit(temp$`With cash rent $2,000 to $2,499 estimate`)
contract_rent_dt %>% filter(Vintage == 2016 & Level == 'county') -> temp
temp[temp == NA]
temp$`With cash rent $1,000 to $1,249 estimate`[temp$`With cash rent $1,000 to $1,249 estimate` == NA]
temp$`With cash rent $1,000 to $1,249 estimate`[is.na(temp$`With cash rent $1,000 to $1,249 estimate`)]
temp$`With cash rent $2,000 or more estimate`[is.na(temp$`With cash rent $2,000 or more estimate`)]
sum(is.na(temp$`Total estimate`))
sum(is.na(temp$`With cash rent $2,000 to $2,499 estimate`))
sum(is.na(temp$`With cash rent $2,000 or more estimate`))
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
t %>%
filter(Vintage == 2016 & Level == "county") -> f_cnty_data
leaflet(f_cnty_data) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(noWrap = TRUE, zIndex = 1)) %>%
addPolygons(
group = "county",
fillColor = ~ colorQuantile("YlOrRd", f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])(f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]]),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
# opacity = 1,
#dashArray = "3",
highlight = highlightOptions(color = "white",weight = 3,bringToFront = TRUE),
options = list(zIndex = 2),
label = lapply(c, HTML)
) %>%
addProviderTiles(
"CartoDB.PositronOnlyLabels",
group = "labels",
options = providerTileOptions(zIndex = 3, pane = 'markerPane')
) %>%
addLayersControl(overlayGroups = c("polygons", "labels"))
leaflet(f_cnty_data) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(noWrap = TRUE, zIndex = 1)) %>%
addPolygons(
group = "county",
fillColor = ~ colorBin("YlOrRd", f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])(f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]]),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
# opacity = 1,
#dashArray = "3",
highlight = highlightOptions(color = "white",weight = 3,bringToFront = TRUE),
options = list(zIndex = 2),
label = lapply(c, HTML)
) %>%
addProviderTiles(
"CartoDB.PositronOnlyLabels",
group = "labels",
options = providerTileOptions(zIndex = 3, pane = 'markerPane')
) %>%
addLayersControl(overlayGroups = c("polygons", "labels"))
colorBin("YlOrRd", f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])(f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])
colorQuantile("YlOrRd", f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])(f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])
tryCatch(colorQuantile("YlOrRd", f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])(f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]]),
error=function(e) colorBin("YlOrRd", f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])(f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]]))
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
View(median_age_by_sex_dt)
runApp('census_explorer_app.R')
pov <- readRDS('./data/Poverty status in the past 12 months by age.rds')
readRDS('./data/Sex by age by veteran status for the civilian population 18 years and over.rds')
runApp('census_explorer_app.R')
`Household type including living alone black or african american alone` <- readRDS("C:/Users/wPorter/GitHub/GNRC_Census_Explorer/GNRC_Shiny_App/data/Household type including living alone black or african american alone.rds")
View(median_age_by_sex_dt)
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
