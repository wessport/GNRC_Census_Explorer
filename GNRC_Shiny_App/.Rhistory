shiny::runApp('//gnrc-fp01/users/wporter/My Documents/GitHub/GNRC_Census_Explorer/GNRC_Shiny_App')
runApp('//gnrc-fp01/users/wporter/My Documents/GitHub/GNRC_Census_Explorer/GNRC_Shiny_App')
runApp('//gnrc-fp01/users/wporter/My Documents/GitHub/GNRC_Census_Explorer/GNRC_Shiny_App')
shiny::runApp()
install.packages("tigris")
install.packages("sf")
install.packages("choroplethr")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
library(tigris)
install.packages("rgdal")
install.packages("rgdal")
install.packages(c("cluster", "lubridate", "Matrix"))
library(rgdal)
library(tigris)
install.packages("rgdal")
library(rgdal)
knitr::opts_chunk$set(echo = TRUE)
library(tigris)
install.packages("sf")
install.packages("sf")
library(tigris)
tigris_cache_dir("C:/Users/wPorter/Data/Census/tigris_cache")
library(sf)
library(tidyverse)
library(ggplot)
library(tigris)
tigris_cache_dir("C:/Users/wPorter/Data/Census/tigris_cache")
library(sf)
library(tidyverse)
library(ggplot2)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
library(tigris)
tigris_cache_dir("C:/Users/wPorter/Data/Census/tigris_cache")
library(sf)
library(tidyverse)
library(ggplot2)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
tnky <- rbind_tigris(
tracts("TN", cb = TRUE),
tracts("KY", cb = TRUE)
)
ggplot2(tnky) + geom_sf()
library(ggplot2)
tnky <- rbind_tigris(
tracts("TN", cb = TRUE),
tracts("KY", cb = TRUE)
)
ggplot2(tnky) + geom_sf()
tnky <- rbind_tigris(
tracts("TN", cb = TRUE),
tracts("KY", cb = TRUE)
)
ggplot(tnky) + geom_sf()
library(tigris)
tigris_cache_dir("C:/Users/wPorter/Data/Census/tigris_cache")
library(sf)
library(tidyverse)
library(ggplot2)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
tnky <- rbind_tigris(
tracts("TN", cb = TRUE),
tracts("KY", cb = TRUE)
)
ggplot(tnky) + geom_sf()
library("ggmap", lib.loc="C:/Users/wPorter/R-3.4.4/library")
tnky <- rbind_tigris(
tracts("TN", cb = TRUE),
tracts("KY", cb = TRUE)
)
ggplot(tnky) + geom_sf()
?geom_sf
devtools::install_github("tidyverse/ggplot2")
require(ggplot2)
install.packages(devtools)
install.packages("devtools")
devtools::install_github("tidyverse/ggplot2")
require(ggplot2)
devtools::install_github("tidyverse/ggplot2")
require(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(tigris)
tigris_cache_dir("C:/Users/wPorter/Data/Census/tigris_cache")
library(sf)
library(tidyverse)
library(ggplot2)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
tnky <- rbind_tigris(
tracts("TN", cb = TRUE),
tracts("KY", cb = TRUE)
)
ggplot(tnky) + geom_sf()
View(tnky)
install.packages(tidycensus)
install.packages('tidycensus')
library(tidycensus)
census_api_key("6999d8d1e472e95e754d605f9a5646beec7eede5")
census_api_key("6999d8d1e472e95e754d605f9a5646beec7eede5", install = TRUE)
cb <- core_based_statistical_areas(cb = TRUE)
View(cb)
pdx <- filter(cb, grepl("Nashville-Davidson--Murfreesboro--Franklin, TN
", NAME))
View(pdx)
?grepl()
pdx <- filter(cb, grepl("Nashville-Davidson--Murfreesboro--Franklin, TN", NAME))
cb <- core_based_statistical_areas(cb = TRUE)
pdx <- filter(cb, grepl("Nashville-Davidson--Murfreesboro--Franklin, TN", NAME))
ggplot(pdx) + geom_sf()
cb <- core_based_statistical_areas(cb = TRUE)
pdx <- filter(cb, grepl("Nashville-Davidson--Murfreesboro--Franklin, TN", NAME))
ggplot(pdx) + geom_sf()
p1 <- tnky[pdx, ]
View(p1)
# Returns all tracts that intersect the metropolitan area
# Subsetting in sf via simple indexing
p1 <- tnky[pdx, ]
ggplot() +
geom_sf(data = p1) +
geom_sf(data = pdx, fill = NA, color = 'red')
# Only want census tracts inside of our metropolitan boundary
# Create binary list of tracts either in (1) or out (0)
w1 <-  st_within(tnky, pdx)
length(0)
length(1)
View(w1)
length(integer[0])
length(integer[1])
w1[1]
w1[5]
length(w1[1])
length(w1[5])
w1[[1]]
length(w1[[1]])
length(w1[[5]])
# Only want census tracts inside of our metropolitan boundary
# Create binary list of tracts either in (1) or out (0)
w1 <-  st_within(tnky, pdx)
# Use purr to convert to a logical vector
w2 <- map_lgl(w1, function(x) {
if (length(x) == 1) {
return(TRUE)
} else {
return(FALSE)
}
})
# Only want census tracts inside of our metropolitan boundary
# Create binary list of tracts either in (1) or out (0)
w1 <-  st_within(tnky, pdx)
# Use purr to convert to a logical vector
w2 <- map_lgl(w1, function(x) {
if (length(x) == 1) {
return(TRUE)
} else {
return(FALSE)
}
})
p2 <- tnky[w2,]
ggplot() +
geom_sf(data = p2) +
geom_sf(data = pdx, fill = NA, color = "red")
