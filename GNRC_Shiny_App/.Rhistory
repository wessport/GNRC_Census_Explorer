shiny::runApp('//gnrc-fp01/users/wporter/My Documents/GitHub/GNRC_Census_Explorer/GNRC_Shiny_App')
runApp('//gnrc-fp01/users/wporter/My Documents/GitHub/GNRC_Census_Explorer/GNRC_Shiny_App')
runApp('//gnrc-fp01/users/wporter/My Documents/GitHub/GNRC_Census_Explorer/GNRC_Shiny_App')
shiny::runApp()
install.packages("tigris")
install.packages("sf")
install.packages("choroplethr")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
library(tigris)
install.packages("rgdal")
install.packages("rgdal")
install.packages(c("cluster", "lubridate", "Matrix"))
library(rgdal)
library(tigris)
install.packages("rgdal")
library(rgdal)
knitr::opts_chunk$set(echo = TRUE)
library(tigris)
install.packages("sf")
install.packages("sf")
library(tigris)
tigris_cache_dir("C:/Users/wPorter/Data/Census/tigris_cache")
library(sf)
library(tidyverse)
library(ggplot)
library(tigris)
tigris_cache_dir("C:/Users/wPorter/Data/Census/tigris_cache")
library(sf)
library(tidyverse)
library(ggplot2)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
library(tigris)
tigris_cache_dir("C:/Users/wPorter/Data/Census/tigris_cache")
library(sf)
library(tidyverse)
library(ggplot2)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
tnky <- rbind_tigris(
tracts("TN", cb = TRUE),
tracts("KY", cb = TRUE)
)
ggplot2(tnky) + geom_sf()
library(ggplot2)
tnky <- rbind_tigris(
tracts("TN", cb = TRUE),
tracts("KY", cb = TRUE)
)
ggplot2(tnky) + geom_sf()
tnky <- rbind_tigris(
tracts("TN", cb = TRUE),
tracts("KY", cb = TRUE)
)
ggplot(tnky) + geom_sf()
library(tigris)
tigris_cache_dir("C:/Users/wPorter/Data/Census/tigris_cache")
library(sf)
library(tidyverse)
library(ggplot2)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
tnky <- rbind_tigris(
tracts("TN", cb = TRUE),
tracts("KY", cb = TRUE)
)
ggplot(tnky) + geom_sf()
library("ggmap", lib.loc="C:/Users/wPorter/R-3.4.4/library")
tnky <- rbind_tigris(
tracts("TN", cb = TRUE),
tracts("KY", cb = TRUE)
)
ggplot(tnky) + geom_sf()
?geom_sf
devtools::install_github("tidyverse/ggplot2")
require(ggplot2)
install.packages(devtools)
install.packages("devtools")
devtools::install_github("tidyverse/ggplot2")
require(ggplot2)
devtools::install_github("tidyverse/ggplot2")
require(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(tigris)
tigris_cache_dir("C:/Users/wPorter/Data/Census/tigris_cache")
library(sf)
library(tidyverse)
library(ggplot2)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
tnky <- rbind_tigris(
tracts("TN", cb = TRUE),
tracts("KY", cb = TRUE)
)
ggplot(tnky) + geom_sf()
View(tnky)
install.packages(tidycensus)
install.packages('tidycensus')
library(tidycensus)
census_api_key("6999d8d1e472e95e754d605f9a5646beec7eede5")
census_api_key("6999d8d1e472e95e754d605f9a5646beec7eede5", install = TRUE)
cb <- core_based_statistical_areas(cb = TRUE)
View(cb)
pdx <- filter(cb, grepl("Nashville-Davidson--Murfreesboro--Franklin, TN
", NAME))
View(pdx)
?grepl()
pdx <- filter(cb, grepl("Nashville-Davidson--Murfreesboro--Franklin, TN", NAME))
cb <- core_based_statistical_areas(cb = TRUE)
pdx <- filter(cb, grepl("Nashville-Davidson--Murfreesboro--Franklin, TN", NAME))
ggplot(pdx) + geom_sf()
cb <- core_based_statistical_areas(cb = TRUE)
pdx <- filter(cb, grepl("Nashville-Davidson--Murfreesboro--Franklin, TN", NAME))
ggplot(pdx) + geom_sf()
p1 <- tnky[pdx, ]
View(p1)
# Returns all tracts that intersect the metropolitan area
# Subsetting in sf via simple indexing
p1 <- tnky[pdx, ]
ggplot() +
geom_sf(data = p1) +
geom_sf(data = pdx, fill = NA, color = 'red')
# Only want census tracts inside of our metropolitan boundary
# Create binary list of tracts either in (1) or out (0)
w1 <-  st_within(tnky, pdx)
length(0)
length(1)
View(w1)
length(integer[0])
length(integer[1])
w1[1]
w1[5]
length(w1[1])
length(w1[5])
w1[[1]]
length(w1[[1]])
length(w1[[5]])
# Only want census tracts inside of our metropolitan boundary
# Create binary list of tracts either in (1) or out (0)
w1 <-  st_within(tnky, pdx)
# Use purr to convert to a logical vector
w2 <- map_lgl(w1, function(x) {
if (length(x) == 1) {
return(TRUE)
} else {
return(FALSE)
}
})
# Only want census tracts inside of our metropolitan boundary
# Create binary list of tracts either in (1) or out (0)
w1 <-  st_within(tnky, pdx)
# Use purr to convert to a logical vector
w2 <- map_lgl(w1, function(x) {
if (length(x) == 1) {
return(TRUE)
} else {
return(FALSE)
}
})
p2 <- tnky[w2,]
ggplot() +
geom_sf(data = p2) +
geom_sf(data = pdx, fill = NA, color = "red")
library(shiny); runApp('census_explorer_app/census_explorer_app.R')
tn <- get_acs(geography = "county",
variables = c(medincome = "B19013_001"),
state = "TN")
tn
library(leaflet)
library(rgdal)
library(magrittr)
library(sf)
library(tidyverse)
library(leaflet)
library(rgdal)
library(magrittr)
library(sf)
library(tigris)
library(tidyverse)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
census_api_key("6999d8d1e472e95e754d605f9a5646beec7eede5")
Sys.getenv("CENSUS_API_KEY")
# A sandbox for working with census data
library(tidycensus)
Sys.getenv("CENSUS_API_KEY")
census_api_key("6999d8d1e472e95e754d605f9a5646beec7eede5")
census_api_key("6999d8d1e472e95e754d605f9a5646beec7eede5", install = TRUE)
Sys.getenv("CENSUS_API_KEY")
tn <- get_acs(geography = "county",
variables = c(medincome = "B19013_001"),
state = "TN")
tn
View(tn)
tn <- get_acs(geography = "csa",
variables = c(medincome = "B19013_001"),
state = "TN")
tn <- get_acs(geography = "MSA",
variables = c(medincome = "B19013_001"),
state = "TN")
tn <- get_acs(geography = "place",
variables = c(medincome = "B19013_001"),
state = "TN")
View(tn)
tn <- get_acs(geography = "bg",
variables = c(medincome = "B19013_001"),
state = "TN")
tn <- get_acs(geography = "block group",
variables = c(medincome = "B19013_001"),
state = "TN")
View(tn)
tn <- get_acs(geography = "core based statistical area",
variables = c(medincome = "B19013_001"),
state = "TN")
tn <- get_acs(geography = "Core Based Statistical Areas",
variables = c(medincome = "B19013_001"),
state = "TN")
tn <- get_acs(geography = "csa",
variables = c(medincome = "B19013_001"),
state = "TN")
tn <- get_acs(geography = "cbsa",
variables = c(medincome = "B19013_001"),
state = "TN")
nation <- get_acs(geography = 'csa', variables = c(medincome = "B19013_001"))
nation <- get_acs(geography = 'Core Based Statistical Areas', variables = c(medincome = "B19013_001"))
nation <- get_acs(geography = 'metropolitan statistical area/micropolitan statistical area', variables = c(medincome = "B19013_001"))
View(nation)
tn <- get_acs(geography = "combined statistical area",
variables = c(medincome = "B19013_001"),
state = "TN")
View(tn)
tn <- get_acs(geography = "urban area",
variables = c(medincome = "B19013_001"),
state = "TN")
nation <- get_acs(geography = 'urban area', variables = c(medincome = "B19013_001"))
acs_variables <-  load_variables(2016, "acs5", cache = TRUE)
View(acs_variables)
v <- read.csv("C:/Users/wPorter/Data/Census/ACS5_tabular_data/data_dictionary/variables.csv", stringsAsFactors = FALSE)
View(v)
unique(v)
View(v)
nrow(unique(v))
write.table(unique(v),"C:/Users/wPorter/Data/Census/ACS5_tabular_data/data_dictionary/unique_variables.csv", sep=",", col.names = T, row.names = F)
test <- get_acs(state = "TN", county = "Davidson", geography = "tract",
variables = "B19013_001", geometry = TRUE)
# A sandbox for working with census data
library(tidycensus)
library(leaflet)
library(rgdal)
library(magrittr)
library(sf)
library(tigris)
library(tidyverse)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
census_api_key("6999d8d1e472e95e754d605f9a5646beec7eede5", install = TRUE)
Sys.getenv("CENSUS_API_KEY")
test <- get_acs(state = "TN", county = "Davidson", geography = "tract",
variables = "B19013_001", geometry = TRUE)
View(test)
test <- get_acs(state = "TN", county = c("Davidson","Rutherford"), geography = "tract",
variables = "B19013_001", geometry = TRUE)
v <- read.csv("C:/Users/wPorter/Data/Census/ACS5_tabular_data/data_dictionary/variables.csv", stringsAsFactors = FALSE)
nrow(unique(v))
write.table(unique(v),"C:/Users/wPorter/Data/Census/ACS5_tabular_data/data_dictionary/unique_variables.csv", sep=",", col.names = T, row.names = F)
write.table(unique(v),"C:/Users/wPorter/Data/Census/ACS5_tabular_data/data_dictionary/unique_variables.csv", sep=",", col.names = T, row.names = F)
gross_rent <- c('B25063_001E'
,'B25063_002E'
,'B25063_003E'
,'B25063_004E'
,'B25063_005E'
,'B25063_006E'
,'B25063_007E'
,'B25063_008E'
,'B25063_009E'
,'B25063_010E'
,'B25063_011E'
,'B25063_012E'
,'B25063_013E'
,'B25063_014E'
,'B25063_015E'
,'B25063_016E'
,'B25063_017E'
,'B25063_018E'
,'B25063_019E'
,'B25063_020E'
,'B25063_021E'
,'B25063_022E'
,'B25063_023E'
,'B25063_024E'
,'B25063_025E'
,'B25063_026E'
,'B25063_027E')
gross_rent <- c('B25063_001E','B25063_002E','B25063_003E','B25063_004E','B25063_005E','B25063_006E','B25063_007E','B25063_008E','B25063_009E',
'B25063_010E','B25063_011E','B25063_012E','B25063_013E','B25063_014E','B25063_015E','B25063_016E','B25063_017E','B25063_018E',
'B25063_019E','B25063_020E','B25063_021E','B25063_022E','B25063_023E','B25063_024E','B25063_025E','B25063_026E','B25063_027E')
test <- get_acs(state = "TN", county = c("Davidson","Rutherford"), geography = "tract",
variables = gross_rent, geometry = TRUE)
View(test)
View(test)
gross_rent <- c(Estimate!!Total = 'B25063_001E','B25063_002E','B25063_003E','B25063_004E','B25063_005E','B25063_006E','B25063_007E','B25063_008E','B25063_009E',
'B25063_010E','B25063_011E','B25063_012E','B25063_013E','B25063_014E','B25063_015E','B25063_016E','B25063_017E','B25063_018E',
'B25063_019E','B25063_020E','B25063_021E','B25063_022E','B25063_023E','B25063_024E','B25063_025E','B25063_026E','B25063_027E')
gross_rent <- c('B25063_001E','B25063_002E','B25063_003E','B25063_004E','B25063_005E','B25063_006E','B25063_007E','B25063_008E',
'B25063_009E','B25063_010E','B25063_011E','B25063_012E','B25063_013E','B25063_014E','B25063_015E','B25063_016E','B25063_017E',
'B25063_018E','B25063_019E','B25063_020E','B25063_021E','B25063_022E','B25063_023E','B25063_024E','B25063_025E','B25063_026E','B25063_027E')
gross_rent <- c(GROSS_RENT_TOTAL = 'B25063_001E','B25063_002E','B25063_003E','B25063_004E','B25063_005E','B25063_006E','B25063_007E','B25063_008E','B25063_009E',
'B25063_010E','B25063_011E','B25063_012E','B25063_013E','B25063_014E','B25063_015E','B25063_016E','B25063_017E','B25063_018E',
'B25063_019E','B25063_020E','B25063_021E','B25063_022E','B25063_023E','B25063_024E','B25063_025E','B25063_026E','B25063_027E')
test <- get_acs(state = "TN", county = c("Davidson","Rutherford"), geography = "tract",
variables = gross_rent, geometry = TRUE)
View(test)
test <- get_acs(state = "TN", county = c("Davidson"), geography = "tract",
variables = gross_rent, geometry = TRUE)
View(test)
gross_rent <- c(GROSS_RENT_TOTAL = 'B25063_001E','B25063_002E','B25063_003E','B25063_004E','B25063_005E','B25063_006E','B25063_007E','B25063_008E','B25063_009E',
'B25063_010E','B25063_011E','B25063_012E','B25063_013E','B25063_014E','B25063_015E','B25063_016E','B25063_017E','B25063_018E',
'B25063_019E','B25063_020E','B25063_021E','B25063_022E','B25063_023E','B25063_024E','B25063_025E','B25063_026E','B25063_027E')
test <- get_acs(state = "TN", county = c("Davidson"), geography = "tract",
variables = gross_rent, geometry = TRUE)
View(test)
test %>% spread(variable,estimate,moe)
test %>% spread(variable,estimate)
test %>% spread(variable,c(estimate,moe))
View(test)
df <- data.frame(month=rep(1:3,2),
student=rep(c("Amy", "Bob"), each=3),
A=c(9, 7, 6, 8, 6, 9),
B=c(6, 7, 8, 5, 6, 7))
View(df)
df %>%
gather(variable, value, -(month:student))
df
df %>%
gather(variable, value, -(month:student))%>%
unite(temp, student, variable)
View(test)
test %>% spread(variable,estimate)
test %>% spread(variable,estimate) -> t
View(t)
test %>% spread(NAME,estimate) -> t
test %>% spread(variable,estimate) -> t
View(t)
test %>% group_by(NAME) %>% spread(variable,estimate) -> t
gather(test, measurement, value, estimate, moe)
t <- gather(test, measurement, value, estimate, moe)
test %>% gather(measurement, value, estimate, moe) -> t
View(t)
test %>% gather(measurement, value, estimate, moe) %>% unite(variable_combined, variable, measurement )-> t
test %>%
gather(measurement, value, estimate, moe) %>%
unite(variable_combined, variable, measurement ) %>%
group_by(NAME) -> t
test %>%
gather(measurement, value, estimate, moe) %>%
unite(variable_combined, variable, measurement ) %>%
group_by(NAME) %>%
arrange(GEOID,variable_combined)-> t
test %>%
gather(measurement, value, estimate, moe) %>%
unite(variable_combined, variable, measurement ) %>%
group_by(NAME) %>%
arrange(GEOID,variable_combined)%>%
spread(variable_combined, value)-> t
test %>%
gather(measurement, value, estimate, moe) %>%
unite(variable_combined, variable, measurement ) %>%
group_by(NAME) %>%
arrange(GEOID,variable_combined)%>%
spread(variable_combined, value)-> t
View(t)
leaflet(test) %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap =TRUE)
)
leaflet(test) %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", estimate)(estimate),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
)
leaflet(t) %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", B25063_001_estimate)(B25063_001_estimate),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
)
st_transform(t, 4326, use_gdal = T)
t <- st_transform(t, 4326, use_gdal = T)
leaflet(t) %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", B25063_001_estimate)(B25063_001_estimate),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
)
svar <- read.csv("C:/Users/wPorter/Data/Census/ACS5_tabular_data/data_dictionary/selected_variableID.csv")
View(svar)
gross_rent <- c('B25063_001E','B25063_002E','B25063_003E','B25063_004E','B25063_005E','B25063_006E','B25063_007E','B25063_008E','B25063_009E',
'B25063_010E','B25063_011E','B25063_012E','B25063_013E','B25063_014E','B25063_015E','B25063_016E','B25063_017E','B25063_018E',
'B25063_019E','B25063_020E','B25063_021E','B25063_022E','B25063_023E','B25063_024E','B25063_025E','B25063_026E','B25063_027E')
gross_rent[svar]
gross_rent[svar$name]
svar[gross_rent]
svar$name[gross_rent]
a <- svar$name[gross_rent]
svar[svar$name %in% gross_rent]
svar[svar$name %in% gross_rent,]
a <- svar[svar$name %in% gross_rent,]
View(a)
View(a)
apple <- "apple"
substr(apple,1)
substr(apple,1,-1)
substr(apple,1,:-1)
substr(apple,1,1)
substr(apple,1,length(apple)-1)
length(apple)
substr(apple,1,nchar(apple)-1)
a %>% mutate(substr(name,1,nchar(name)-1))
a %>% mutate(substr(a$name,1,nchar(a$name)-1))
a %>% mutate(name_mod = name)
a %>% mutate(name_mod = substr(name,1,nchar(name)-1))
a %>% mutate(name_mod = substr(name,1,nchar(as.character(name))-1))
a %>% mutate(name_mod = substr(name,1,nchar(as.character(name))-1)) -> a
rm(apple)
install.packages("lettercase")
library(lettercase)
test_string <- "GROSS_RENT"
str_title_case(test_string)
test_string <- "GROSSRENT"
str_title_case(test_string)
test_string <- "GROSS RENT"
str_title_case(test_string)
toTitleCase(test_string)
tools::toTitleCase(test_string)
