library(leaflet)
library(rgdal)
library(magrittr)
library(sf)
library(tigris)
library(tidyverse)
library(lettercase)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
census_api_key("6999d8d1e472e95e754d605f9a5646beec7eede5", install = TRUE)
Sys.getenv("CENSUS_API_KEY")
leaflet(census_format) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(noWrap =TRUE, zIndex = 1)
) %>%
addPolygons(group = "polygons",
fillColor = ~colorQuantile("YlOrRd", map_var)(map_var),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE),
options=list(zIndex = 2)
) %>%
addProviderTiles("CartoDB.PositronOnlyLabels", group="labels",
options=providerTileOptions(zIndex = 3, pane = 'markerPane')) %>%
addLayersControl(overlayGroups = c("polygons", "labels"))
leaflet(census_format) %>%
addPolygons(group = "polygons",
fillColor = ~colorQuantile("YlOrRd", map_var)(map_var),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE),
options=list(zIndex = 2)
) %>%
addProviderTiles("CartoDB.PositronOnlyLabels", group="labels",
options=providerTileOptions(zIndex = 3, pane = 'markerPane')) %>%
addLayersControl(overlayGroups = c("polygons", "labels"))
leaflet(census_format) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(group = "polygons",
fillColor = ~colorQuantile("YlOrRd", map_var)(map_var),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
) %>%
addProviderTiles("CartoDB.PositronOnlyLabels", group="labels",
options=providerTileOptions(pane = 'markerPane')) %>%
addLayersControl(overlayGroups = c("polygons", "labels"))
leaflet(census_format) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(group = "polygons",
fillColor = ~colorQuantile("YlOrRd", map_var)(map_var),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
)
leaflet(census_format)
remove.packages("leaflet")
install.packages("leaflet")
leaflet(census_format) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(group = "polygons",
fillColor = ~colorQuantile("YlOrRd", map_var)(map_var),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
)
# Formatting census data for end users
library(tidycensus)
library(leaflet)
library(rgdal)
library(magrittr)
library(sf)
library(tigris)
library(tidyverse)
library(lettercase)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
census_api_key("6999d8d1e472e95e754d605f9a5646beec7eede5", install = TRUE)
Sys.getenv("CENSUS_API_KEY")
leaflet(census_format) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(group = "polygons",
fillColor = ~colorQuantile("YlOrRd", map_var)(map_var),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
)
.libpaths
.libPaths
leaflet(test) %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", ALAND)(ALAND),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE),
#label = labels
label = lapply(c,HTML)
)
# Leaflet works with wide format, expects only 1 variable at a time
leaflet(t) %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", B25063_001_estimate)(B25063_001_estimate),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
)
leaflet(census_format) %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", map_var)(map_var),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
)
leaflet(census_format) %>%
addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", map_var)(map_var),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
)
leaflet(census_format) %>%
addProviderTiles(providers$CartoDB,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", map_var)(map_var),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
)
leaflet(census_format) %>%
addProviderTiles(providers$HERE.normalDayGrey,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", map_var)(map_var),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
)
leaflet(census_format) %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", map_var)(map_var),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
)
leaflet(census_format) %>%
addProviderTiles(providers$Esri,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", map_var)(map_var),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
)
leaflet(census_format) %>%
addProviderTiles(providers$MapBox,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", map_var)(map_var),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
)
leaflet(census_format) %>%
addProviderTiles(providers$OpenStreetMap,
options = providerTileOptions(noWrap =TRUE)
) %>%
addPolygons(fillColor = ~colorQuantile("YlOrRd", map_var)(map_var),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
opacity = 1,
dashArray = "3",
highlight = highlightOptions(color = "white", weight = 3, bringToFront = TRUE)
)
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addProviderTiles(providers$CartoDB.Positron)
library(shiny); runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
string(1)
str(1)
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
library(shiny)
library(leaflet)
library(rgdal)
library(magrittr)
library(sf)
library(tidyverse)
library(htmltools)
# Import data
load("./data/county_di.RData")
load("./data/tract_di.RData")
load("./data/bg_di.RData")
View(tract_di_2011)
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
install.packages("DT")
runApp('census_explorer_app.R')
library(shiny)
library(ggplot2)  # for the diamonds dataset
ui <- fluidPage(
title = "Examples of DataTables",
sidebarLayout(
sidebarPanel(
conditionalPanel(
'input.dataset === "diamonds"',
checkboxGroupInput("show_vars", "Columns in diamonds to show:",
names(diamonds), selected = names(diamonds))
),
conditionalPanel(
'input.dataset === "mtcars"',
helpText("Click the column header to sort a column.")
),
conditionalPanel(
'input.dataset === "iris"',
helpText("Display 5 records by default.")
)
),
mainPanel(
tabsetPanel(
id = 'dataset',
tabPanel("diamonds", DT::dataTableOutput("mytable1")),
tabPanel("mtcars", DT::dataTableOutput("mytable2")),
tabPanel("iris", DT::dataTableOutput("mytable3"))
)
)
)
)
server <- function(input, output) {
# choose columns to display
diamonds2 = diamonds[sample(nrow(diamonds), 1000), ]
output$mytable1 <- DT::renderDataTable({
DT::datatable(diamonds2[, input$show_vars, drop = FALSE])
})
# sorted columns are colored now because CSS are attached to them
output$mytable2 <- DT::renderDataTable({
DT::datatable(mtcars, options = list(orderClasses = TRUE))
})
# customize the length drop-down menu; display 5 rows per page by default
output$mytable3 <- DT::renderDataTable({
DT::datatable(iris, options = list(lengthMenu = c(5, 30, 50), pageLength = 5))
})
}
shinyApp(ui, server)
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
size(county_di_2016)
length(county_di_2016)
ncol(county_di_2016)
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
View(county_di_2016)
county_di_2016[,"Shellys_DI"]
county_di_2016 %>%
st_set_geometry(NULL) %>%
county_di_2016 %>%
st_set_geometry(NULL)
county_di_2016 %>%
st_set_geometry(NULL) %>%
select("Shellys_DI")
county_di_2016 %>%
st_set_geometry(NULL) %>%
select("Shellys_DI")
county_di_2016 %>%
st_set_geometry(NULL) %>%
select("Shellys_DI") -> c(label, map_var)
county_di_2016 %>%
st_set_geometry(NULL) %>%
select("Shellys_DI") -> label, map_var
county_di_2016 %>%
st_set_geometry(NULL) %>%
select("NAME") -> label
label
county_di_2016 %>%
st_set_geometry(NULL) %>%
select("Shellys_DI") -> map_var
View(map_var)
county_di_2016 %>%
st_set_geometry(NULL) %>%
ungroup() %>%
select("Shellys_DI") -> map_var
map_var
rm(map_var)
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
county_di_2016 %>%
st_set_geometry(NULL) %>%
ungroup() %>%
pull("Shellys_DI") -> map_var
map_var
county_di_2016 %>%
st_set_geometry(NULL) %>%
pull("NAME") -> label
label
rm(label)
rm(map_var)
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
View(county_di_2016)
county_di_2016 %>%
mutate(Vintage = 2016)
county_di_2015 %>%
mutate(Vintage = 2015)
county_di_2016 %>%
mutate(Vintage = 2016)-> county_di_2016
county_di_2015 %>%
mutate(Vintage = 2015) -> county_di_2015
county_di_2014 %>%
mutate(Vintage = 2014) -> county_di_2014
county_di_2013 %>%
mutate(Vintage = 2013) -> county_di_2013
county_di_2012 %>%
mutate(Vintage = 2012) -> county_di_2012
county_di_2011 %>%
mutate(Vintage = 2011) -> county_di_2011
View(county_di_2016)
county_di_2016 %>%
mutate(Vintage = int(2016))-> county_di_2016
county_di_2016 %>%
mutate(Vintage = 2016.0)-> county_di_2016
View(county_di_2016)
county_di_2016 %>%
mutate(Vintage = 2016)-> county_di_2016
county_di_2016 %>%
bindrows(county_di_2015)
county_di_2016 %>%
bind_rows(county_di_2015)
save(
tract_di_2016,
tract_di_2015,
tract_di_2014,
tract_di_2013,
tract_di_2012,
tract_di_2011,
file = "data/tract_di.RData"
)
county_di_2016 %>%
bind_rows.sf(county_di_2015)
county_di_2016 %>%
rbind(county_di_2015)
county_di_2016 %>%
rbind(county_di_2015) -> test
View(test)
class(test)
county_di_2016 %>%
rbind(county_di_2015,
county_di_2014,
county_di_2013,
county_di_2012,
county_di_2011) -> test
county_di_2016 %>%
rbind(county_di_2015) %>%
rbind(county_di_2014) %>%
rbind(county_di_2013) %>%
rbind(county_di_2012) %>%
rbind(county_di_2011) -> test
View(test)
test
View(test)
w1
rm(w1)
v
rm(v)
View(ui)
rm(tnky)
rm(test2)
View(test)
test
county_di_2016
rbind(county_di_2016,county_di_2015) -> test
View(test)
rbind(county_di_2016,county_di_2015,county_di_2014)
rbind(county_di_2016,county_di_2015,county_di_2014)-> test
rbind(county_di_2016,county_di_2015) -> test
rbind(test,county_di_2014)-> test
View(test)
c(county_di_2016,county_di_2015,county_di_2014)-> test
View(test)
(test = c(county_di_2016, county_di_2015))
View(test)
rbind(county_di_2016,county_di_2015) -> test
View(test)
county_di_2016 %>%
rbind(county_di_2015) %>%
rbind(county_di_2014) %>%
rbind(county_di_2013) %>%
rbind(county_di_2012) %>%
rbind(county_di_2011) -> test
test
View(county_di_2015)
