ratio_income_pov_dt <- request_data(tableID)
saveRDS(ratio_income_pov_dt,"Ratio of income to poverty level in the past 12 mo.rds")
tableID <- "B17026"
ratio_income_pov_fam_dt <- request_data(tableID)
saveRDS(ratio_income_pov_fam_dt,"./data/Ratio of income to poverty level of families in the past 12 months.rds")
tableID <- "B14001"
shool_enrollment_dt <- request_data(tableID)
saveRDS(shool_enrollment_dt,"./data/School enrollment by level of school for the population 3 years and over.rds")
tableID <- "B01001"
sex_by_age_dt <- request_data(tableID)
saveRDS(sex_by_age_dt,"./data/Sex by age.rds")
sex_by_age_by_dis <- "B18101"
sex_by_age_by_dis_dt <- request_data(tableID)
saveRDS(sex_by_age_by_dis_dt,"./data/Sex by age by disability status.rds")
tableID <- "B15001"
sex_by_age_by_edu_dt <- request_data(tableID)
saveRDS(sex_by_age_by_edu_dt,"./data/Sex by age by educational attainment for the population 18 years and over.rds")
tableID <- "B23001"
sex_by_age_by_emp_dt <- request_data(tableID)
saveRDS(sex_by_age_by_emp_dt,"./data/Sex by age by employment status for the population 16 years and over.rds")
tableID <- "B21001"
sex_by_age_by_vet_dt <- request_data(tableID)
saveRDS(sex_by_age_by_vet_dt,"./data/Sex by age by veteran status for the civilian population 18 years and over.rds")
tableID <- "B24080"
sex_by_class_dt <- request_data(tableID)
saveRDS(sex_by_class_dt,"./data/Sex by class of worker for the civilian employed population 16 years and over.rds")
tableID <- "B08006"
sex_of_workers_trans_dt <- request_data(tableID)
saveRDS(sex_of_workers_trans_dt,"./data/Sex of workers by means of transportation to work.rds")
tableID <- "B08012"
sex_workers_travel_time_dt <- request_data(tableID)
saveRDS(sex_workers_travel_time_dt,"./data/Sex of workers by travel time to work.rds")
tableID <- "B08014"
sex_workers_vehicle_avail_dt <- request_data(tableID)
saveRDS(sex_workers_vehicle_avail_dt,"./data/Sex of workers by vehicles available.rds")
tableID <- "B08302"
time_leaving_home_dt <- request_data(tableID)
saveRDS(time_leaving_home_dt,"./data/Time leaving home to go to work.rds")
tableID <- "B01003"
total_pop_dt <- request_data(tableID)
saveRDS(total_pop_dt,"./data/Total Population.rds")
tableID <- "B08303"
travel_time_to_work_dt <- request_data(tableID)
saveRDS(travel_time_to_work_dt,"./data/Travel time to work.rds")
tableID <- "B25004"
vacancy_status_dt <- request_data(tableID)
saveRDS(vacancy_status_dt,"./data/Vacancy status.rds")
tableID <- "B25075"
value_dt <- request_data(tableID)
saveRDS(value_dt,"./data/Value.rds")
tableID <- "B13002"
women_birth_dt <- request_data(tableID)
saveRDS(women_birth_dt,"./data/Women 15 to 50 years who had a birth in the past 12 mo by marital status and age.rds")
tableID <- "B25034"
year_struc_built_dt <- request_data(tableID)
saveRDS(year_struc_built_dt,"./data/Year structure built.rds")
View(median_monthly_housing_dt)
geom <- readRDS("./data/geometry.rds")
test <- contract_rent_d
test <- contract_rent_dt
test %>%
left_join(geom, by = c("GEOID" = "GEOID")) -> t
t <- st_as_sf(t)
t %>%
ungroup %>%
filter(Vintage == 2016 & Level == "county") -> f_cnty_data
t %>%
ungroup %>%
filter(Vintage == 2016 & Level == "county") -> f_cnty_data
leaflet(f_cnty_data) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(noWrap = TRUE, zIndex = 1)) %>%
addPolygons(
group = "county",
# fillColor = ~ colorQuantile("YlOrRd", f_cnty_data[["Total estimate"]])(f_cnty_data[["Total estimate"]]),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
# opacity = 1,
#dashArray = "3",
highlight = highlightOptions(color = "white",weight = 3,bringToFront = TRUE),
options = list(zIndex = 2),
label = lapply(c, HTML)
) %>%
addProviderTiles(
"CartoDB.PositronOnlyLabels",
group = "labels",
options = providerTileOptions(zIndex = 3, pane = 'markerPane')
) %>%
addLayersControl(overlayGroups = c("polygons", "labels"))
leaflet(f_cnty_data) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(noWrap = TRUE, zIndex = 1)) %>%
addPolygons(
group = "county",
fillColor = ~ colorQuantile("YlOrRd", f_cnty_data[["Total estimate"]])(f_cnty_data[["Total estimate"]]),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
# opacity = 1,
#dashArray = "3",
highlight = highlightOptions(color = "white",weight = 3,bringToFront = TRUE),
options = list(zIndex = 2),
label = lapply(c, HTML)
) %>%
addProviderTiles(
"CartoDB.PositronOnlyLabels",
group = "labels",
options = providerTileOptions(zIndex = 3, pane = 'markerPane')
) %>%
addLayersControl(overlayGroups = c("polygons", "labels"))
View(f_cnty_data)
t %>%
filter(Vintage == 2016 & Level == "county") -> f_cnty_data
View(contract_rent_dt)
contract_rent %>% filter(NAME == "Cheatham County, Tennessee") -> test
View(test)
contract_rent %>% filter(GEOID == "47021") -> test
contract_rent_dt %>% filter(GEOID == "47021") -> test
test <- contract_rent_dt
test %>%
left_join(geom, by = c("GEOID" = "GEOID")) -> t
t <- st_as_sf(t)
View(t)
dplyr::distinct(geom) -> g
View(geom)
unique(geom) -> h
View(geom)
test %>%
left_join(geom) -> t
# Create geometry object for joining geometry to data
df <- readRDS("./data/default_data.rds")
View(df)
df %>%
ungroup() %>%
select(NAME) -> geom
View(geom)
df %>%
ungroup() %>%
select(NAME,Vintage) -> geom
saveRDS(geom, "./data/geometry.rds")
View(geom)
saveRDS(geom, "./data/geometry.rds")
geom <- readRDS("./data/geometry.rds")
test <- contract_rent_dt
test %>%
left_join(geom, by = c("NAME" = "NAME")) -> t
View(geom)
test %>%
left_join(geom, by = c("NAME" = "NAME","Vintage" = "Vintage")) -> t
View(t)
t <- st_as_sf(t)
t %>%
filter(Vintage == 2016 & Level == "county") -> f_cnty_data
leaflet(f_cnty_data) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(noWrap = TRUE, zIndex = 1)) %>%
addPolygons(
group = "county",
fillColor = ~ colorQuantile("YlOrRd", f_cnty_data[["Total estimate"]])(f_cnty_data[["Total estimate"]]),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
# opacity = 1,
#dashArray = "3",
highlight = highlightOptions(color = "white",weight = 3,bringToFront = TRUE),
options = list(zIndex = 2),
label = lapply(c, HTML)
) %>%
addProviderTiles(
"CartoDB.PositronOnlyLabels",
group = "labels",
options = providerTileOptions(zIndex = 3, pane = 'markerPane')
) %>%
addLayersControl(overlayGroups = c("polygons", "labels"))
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
temp <- readRDS("./data/Diversity Indices.rds")
View(temp)
temp %>%
st_set_geometry(NULL)
temp %>% st_set_geometry(NULL)-> temp
View(temp)
saveRDS(temp,"./data/Diversity Indices.rds")
st_set_geometry(NULL)
runApp('census_explorer_app.R')
View(contract_rent_dt)
runApp('census_explorer_app.R')
contract_rent_dt$`With cash rent $2,000 to $2,499 estimate`
is.NA(contract_rent_dt$`With cash rent $2,000 to $2,499 estimate`)
is.na(contract_rent_dt$`With cash rent $2,000 to $2,499 estimate`)
contract_rent_dt %>% filter(Vintage == 2016 & Level == 'county') -> temp
View(temp)
temp$`With cash rent $2,000 to $2,499 estimate`
na.omit(temp)
temp <- na.omit(temp)
contract_rent_dt %>% filter(Vintage == 2016 & Level == 'county') -> temp
temp <- na.omit(temp$`With cash rent $2,000 to $2,499 estimate`)
contract_rent_dt %>% filter(Vintage == 2016 & Level == 'county') -> temp
temp[temp == NA]
temp$`With cash rent $1,000 to $1,249 estimate`[temp$`With cash rent $1,000 to $1,249 estimate` == NA]
temp$`With cash rent $1,000 to $1,249 estimate`[is.na(temp$`With cash rent $1,000 to $1,249 estimate`)]
temp$`With cash rent $2,000 or more estimate`[is.na(temp$`With cash rent $2,000 or more estimate`)]
sum(is.na(temp$`Total estimate`))
sum(is.na(temp$`With cash rent $2,000 to $2,499 estimate`))
sum(is.na(temp$`With cash rent $2,000 or more estimate`))
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
t %>%
filter(Vintage == 2016 & Level == "county") -> f_cnty_data
leaflet(f_cnty_data) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(noWrap = TRUE, zIndex = 1)) %>%
addPolygons(
group = "county",
fillColor = ~ colorQuantile("YlOrRd", f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])(f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]]),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
# opacity = 1,
#dashArray = "3",
highlight = highlightOptions(color = "white",weight = 3,bringToFront = TRUE),
options = list(zIndex = 2),
label = lapply(c, HTML)
) %>%
addProviderTiles(
"CartoDB.PositronOnlyLabels",
group = "labels",
options = providerTileOptions(zIndex = 3, pane = 'markerPane')
) %>%
addLayersControl(overlayGroups = c("polygons", "labels"))
leaflet(f_cnty_data) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(noWrap = TRUE, zIndex = 1)) %>%
addPolygons(
group = "county",
fillColor = ~ colorBin("YlOrRd", f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])(f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]]),
fillOpacity = 0.5,
weight = 2,
stroke = T,
color = "grey",
# opacity = 1,
#dashArray = "3",
highlight = highlightOptions(color = "white",weight = 3,bringToFront = TRUE),
options = list(zIndex = 2),
label = lapply(c, HTML)
) %>%
addProviderTiles(
"CartoDB.PositronOnlyLabels",
group = "labels",
options = providerTileOptions(zIndex = 3, pane = 'markerPane')
) %>%
addLayersControl(overlayGroups = c("polygons", "labels"))
colorBin("YlOrRd", f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])(f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])
colorQuantile("YlOrRd", f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])(f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])
tryCatch(colorQuantile("YlOrRd", f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])(f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]]),
error=function(e) colorBin("YlOrRd", f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]])(f_cnty_data[["With cash rent $2,000 to $2,499 estimate"]]))
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
View(median_age_by_sex_dt)
runApp('census_explorer_app.R')
pov <- readRDS('./data/Poverty status in the past 12 months by age.rds')
readRDS('./data/Sex by age by veteran status for the civilian population 18 years and over.rds')
runApp('census_explorer_app.R')
`Household type including living alone black or african american alone` <- readRDS("C:/Users/wPorter/GitHub/GNRC_Census_Explorer/GNRC_Shiny_App/data/Household type including living alone black or african american alone.rds")
View(median_age_by_sex_dt)
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
p("The checkbox group controls the select input"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
selectInput("inSelect", "Select input",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateSelectInput(session, "inSelect",
label = paste("Select input label", length(x)),
choices = x,
selected = tail(x, 1)
)
})
}
shinyApp(ui, server)
}
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
library(shiny); runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
runApp('census_explorer_app.R')
install.packages("ggplot2")
install.packages("colorspace", repos = "http://R-Forge.R-project.org")
install.packages("colorspace", repos = "http://R-Forge.R-project.org")
install.packages("colorspace", repos = "http://R-Forge.R-project.org")
install.packages("colorspace", repos = "http://R-Forge.R-project.org")
install.packages("colorspace", repos = "http://R-Forge.R-project.org")
devtools::install_github("clauswilke/multiscales")
install.packages("colorspace")
devtools::install_github("clauswilke/multiscales")
library(ggplot2)
library(multiscales)
library(colorspace)
View(county_data_16)
state = 'TN'
counties <- c('Cheatham','Davidson','Dickson','Houston','Humphreys','Montgomery','Maury','Robertson','Rutherford','Stewart','Sumner',
'Trousdale','Williamson','Wilson')
geography <- 'tract'
tableID <- 'B25063'
yr <- 2016
test <- get_acs(geography,tableID,year,state,counties)
# A sandbox for working with census data
library(dplyr)
library(ggplot2)
library(tidycensus)
library(leaflet)
library(rgdal)
library(magrittr)
library(sf)
library(stringr)
library(tigris)
library(tidyverse)
library(lettercase)
library(plotly)
library(viridis)
options(tigris_class = "sf")
options(tigris_use_cache = TRUE)
census_api_key("6999d8d1e472e95e754d605f9a5646beec7eede5", install = TRUE)
Sys.getenv("CENSUS_API_KEY")
state = 'TN'
counties <- c('Cheatham','Davidson','Dickson','Houston','Humphreys','Montgomery','Maury','Robertson','Rutherford','Stewart','Sumner',
'Trousdale','Williamson','Wilson')
geography <- 'tract'
tableID <- 'B25063'
yr <- 2016
test <- get_acs(geography,tableID,year,state,counties)
state = 'TN'
counties <- c('Cheatham','Davidson','Dickson','Houston','Humphreys','Montgomery','Maury','Robertson','Rutherford','Stewart','Sumner',
'Trousdale','Williamson','Wilson')
geography <- 'tract'
tableID <- 'B25063'
year <- 2016
test <- get_acs(geography,tableID,year,state,counties)
test <- get_acs(geography,tableID,year,state,counties)
test <- get_acs(geography,tableID,2016,state,counties)
test <- get_acs(geography, table = tableID, year = year, state = state, county = counties)
census_api_key("6999d8d1e472e95e754d605f9a5646beec7eede5", install = TRUE)
Sys.getenv("CENSUS_API_KEY")
census_api_key("6999d8d1e472e95e754d605f9a5646beec7eede5")
test <- get_acs(geography, table = tableID, year = year, state = state, county = counties)
View(test)
test <- get_acs(geography, table = tableID, year = year, state = state, county = counties, geometry =  TRUE)
View(test)
test %>% filter(variable == 'B25063_001') -> test
View(test)
ggplot(test, aes(fill = zip(estimate/1000, moe/estimate))) +
geom_sf(color = "gray30", size = 0.2) +
# coord_sf(xlim = c(-88, -79.8), ylim = c(24.1, 31.2), datum = NA) +
bivariate_scale("fill",
pal_vsup_viridis(),
name = c("median house\nvalues ($1K)", "uncertainty"),
limits = list(c(0, 400), c(0, 0.4)),
breaks = list(waiver(), c(0.05, 0.15, 0.25, 0.35)),
labels = list(waiver(), scales::percent),
guide = "colourfan"
) +
theme_void() +
theme(
legend.key.size = grid::unit(0.8, "cm"),
legend.title.align = 0.5,
legend.justification = c(0, 0),
legend.position = c(0.1, 0.15)
)
detach("package:colorspace", unload=TRUE)
library("colorspace", lib.loc="C:/Program Files/R/R-3.4.2/library")
remove.packages("colorspace")
install.packages("colorspace", repos = "http://R-Forge.R-project.org")
install.packages("colorspace", repos = "http://R-Forge.R-project.org")
